/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 26 23:23:59 GMT 2018
 */

package familytree.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import familytree.model.Person;
import familytree.model.Relation;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = new Person(">7~lh4", ">7~lh4", true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2763, 13, 29, 29, 29);
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar0);
      assertFalse(boolean0);
      assertEquals(">7~lh4", person0.getLastName());
      assertEquals(">7~lh4", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2763,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=29,HOUR_OF_DAY=29,MINUTE=29,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = new Person(" ", " ", true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(31, 2690, 31);
      person0.setDateOfDeath(mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar1);
      assertFalse(boolean0);
      assertEquals(1, person0.getId());
      assertEquals(" ", person0.getFirstName());
      assertEquals(" ", person0.getLastName());
      assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = new Person("", "Mother", false);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(572, 572, 572, 1970, (-1), 1503);
      person0.setDateOfBirth(mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar1);
      assertEquals("Mother", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = Person.restorePerson(29, "", "", true);
      assertEquals("", person0.getLastName());
      assertEquals(29, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Person person0 = new Person("male", "male", false);
      boolean boolean0 = person0.isFemale();
      assertEquals("male", person0.getLastName());
      assertFalse(boolean0);
      assertEquals(1, person0.getId());
      assertEquals("male", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      assertEquals(2, person1.getId());
      assertEquals("", person1.getFirstName());
      
      person0.getRelationships();
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = new Person("jf8yd)V", (String) null, false);
      String string0 = person0.getLastName();
      assertEquals(1, person0.getId());
      assertEquals("jf8yd)V", person0.getFirstName());
      assertNull(string0);
      assertEquals("male", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      String string0 = person0.getLastName();
      assertEquals(1, person0.getId());
      assertEquals("", string0);
      assertEquals("female", person0.getGender());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "@V%6C0^VGF8EwIet", "", false);
      int int0 = person0.getId();
      assertEquals(0, int0);
      assertEquals("@V%6C0^VGF8EwIet", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = Person.restorePerson((-959), "male", "female", false);
      int int0 = person0.getId();
      assertEquals("female", person0.getLastName());
      assertEquals((-959), int0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      String string0 = person0.getFirstName();
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
      assertNull(string0);
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = new Person("", "female", true);
      String string0 = person0.getFirstName();
      assertEquals("", string0);
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getLastName());
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Locale locale0 = new Locale("!,ua/o,BW]/d(", "male");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      person0.setDateOfDeath(mockGregorianCalendar0);
      mockGregorianCalendar0.setFirstDayOfWeek((-285));
      person0.getDateOfDeath();
      assertEquals(1, person0.getId());
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = new Person("$+R\"Z", "$+R\"Z", false);
      person0.setDateOfDeath((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        person0.getDateOfDeath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Person person0 = new Person("^S", "f0hlu2", false);
      person0.setDateOfBirth((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        person0.getDateOfBirth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = new Person("", "", false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-1));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      person0.setDateOfBirth((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = new Person("", "female", false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-230), (-230), 252, (-2935), 252, 63);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Person person0 = new Person("]pL< 8Fw", "]pL< 8Fw", false);
      // Undeclared exception!
      try { 
        person0.addChild((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person("", "female", true);
      person0.addChild(person1);
      Relation relation0 = person1.getRelation(person0);
      assertEquals(2, person1.getId());
      assertNotNull(relation0);
      assertEquals("", person1.getFirstName());
      assertEquals("female", person1.getLastName());
      assertEquals(1, person1.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person("", "female", true);
      person1.addChild(person0);
      assertEquals("", person1.getFirstName());
      assertEquals("female", person1.getLastName());
      assertEquals(2, person1.getId());
      
      Relation relation0 = person0.getRelation(person0);
      assertEquals(1, person0.getGenderAsInt());
      assertNull(relation0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person((String) null, "", false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 33, 0, 0);
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=33,HOUR_OF_DAY=33,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(boolean0);
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getId());
      assertEquals("male", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person(" ", " ", true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(31, 2690, 31);
      person0.setDateOfDeath(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.set(2690, 0, 31);
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2690,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Locale locale0 = new Locale("!,ua/o,BW]/d(", "male");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      person0.setDateOfDeath(mockGregorianCalendar0);
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertTrue(boolean0);
      assertEquals(1, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = new Person("^S", "f0hlu2", false);
      boolean boolean0 = person0.dateOfDeathEquals((Calendar) null);
      assertFalse(boolean0);
      assertFalse(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("f0hlu2", person0.getLastName());
      assertEquals("^S", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Locale locale0 = new Locale("!,ua/o,BW]/d(", "male");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertFalse(boolean0);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person("yI/VSPz~", "yI/VSPz~", false);
      System.setCurrentTimeMillis(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar0);
      assertTrue(boolean0);
      assertEquals("yI/VSPz~", person0.getLastName());
      assertEquals(1, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals("yI/VSPz~", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person(">7~lh4", ">7~lh4", true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2763, 13, 29, 29, 29);
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar0);
      assertEquals(">7~lh4", person0.getFirstName());
      assertEquals(">7~lh4", person0.getLastName());
      assertEquals(1, person0.getId());
      assertFalse(boolean0);
      assertTrue(person0.isFemale());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2763,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=29,HOUR_OF_DAY=29,MINUTE=29,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertTrue(boolean0);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person(">7~lh4", ">7~lh4", true);
      boolean boolean0 = person0.dateOfBirthEquals((Calendar) null);
      assertEquals(">7~lh4", person0.getFirstName());
      assertEquals(">7~lh4", person0.getLastName());
      assertFalse(boolean0);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = new Person(" ", " ", true);
      int int0 = person0.getGenderAsInt();
      assertEquals(" ", person0.getFirstName());
      assertEquals(1, int0);
      assertEquals(" ", person0.getLastName());
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Person person0 = new Person("", "", false);
      int int0 = person0.getGenderAsInt();
      assertEquals("", person0.getFirstName());
      assertEquals(0, int0);
      assertEquals(1, person0.getId());
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Person person0 = new Person("", "", true);
      String string0 = person0.getGender();
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("female", string0);
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Person person0 = new Person("", "", false);
      String string0 = person0.getGender();
      assertEquals(1, person0.getId());
      assertEquals("male", string0);
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      assertEquals(2, person1.getId());
      
      Vector vector0 = person0.getChildren();
      assertEquals("[ ]", vector0.toString());
      assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Person person0 = new Person("Pmp~ni", "Pmp~ni", true);
      Person person1 = new Person("Pmp~ni", "male", true);
      person0.addChild(person1);
      assertEquals("Pmp~ni", person0.getLastName());
      
      Vector vector0 = person1.getChildren();
      assertEquals("male", person1.getLastName());
      assertTrue(person1.isFemale());
      assertEquals("Pmp~ni", person1.getFirstName());
      assertEquals(2, person1.getId());
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person("", "female", true);
      Person person2 = new Person("%", "", true);
      person1.addChild(person2);
      boolean boolean0 = person2.removeRelation(person0);
      assertEquals(3, person2.getId());
      assertEquals("", person2.getLastName());
      assertEquals("%", person2.getFirstName());
      assertTrue(person2.isFemale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Person person0 = new Person("Pmp~ni", "Pmp~ni", true);
      Person person1 = new Person("Pmp~ni", "male", true);
      person0.addChild(person1);
      assertEquals(2, person1.getId());
      assertEquals("Pmp~ni", person1.getFirstName());
      assertEquals("male", person1.getLastName());
      
      Relation relation0 = person0.getRelation(person0);
      assertEquals("Pmp~ni", person0.getLastName());
      assertNull(relation0);
      assertEquals("female", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("female", "female", true);
      person0.addChild(person1);
      Relation relation0 = person0.getRelation(person1);
      assertEquals(2, person1.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertNotNull(relation0);
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Person person0 = new Person("Pmp~ni", "Pmp~ni", true);
      Person person1 = new Person("Pmp~ni", "male", true);
      Person person2 = new Person("male", "male", true);
      person2.addChild(person1);
      person2.addSpouse(person0);
      person1.addSpouse(person0);
      assertEquals("Pmp~ni", person0.getLastName());
      assertEquals("male", person1.getLastName());
      assertEquals(2, person1.getId());
      assertEquals("Pmp~ni", person1.getFirstName());
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person("", "female", true);
      Person person2 = new Person("%", "", true);
      person1.addChild(person2);
      person0.addChild(person2);
      assertEquals("", person2.getLastName());
      assertEquals(3, person2.getId());
      assertEquals("%", person2.getFirstName());
      assertTrue(person2.isFemale());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person("", "female", true);
      Person person2 = new Person("%", "", true);
      person1.addChild(person2);
      person1.addChild(person0);
      try { 
        person0.addChild(person2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Person person0 = new Person("v/YmyCPd5qj^o?YZ^~-", "v/YmyCPd5qj^o?YZ^~-", false);
      Person person1 = new Person("male", "female", false);
      person0.addChild(person1);
      try { 
        person0.addChild(person1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Person person0 = new Person("y?`v*@duUX", "y?`v*@duUX", false);
      Person person1 = new Person("", "male", false);
      person0.addChild(person1);
      assertEquals("", person1.getFirstName());
      assertEquals("male", person1.getLastName());
      
      Person person2 = new Person("", (String) null, false);
      person0.addSpouse(person2);
      assertEquals(3, person2.getId());
      assertEquals("y?`v*@duUX", person0.getLastName());
      assertEquals("male", person2.getGender());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Person person0 = new Person("", "", true);
      try { 
        person0.addSpouse(person0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Person person0 = new Person("nj.)N", "nj.)N", false);
      // Undeclared exception!
      try { 
        person0.addSpouse((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Person person0 = new Person(" ", " ", true);
      int int0 = person0.getId();
      assertEquals(1, int0);
      assertEquals("female", person0.getGender());
      assertEquals(" ", person0.getLastName());
      assertEquals(" ", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Person person0 = new Person("tEz#[CNEI&xm[8", (String) null, true);
      String string0 = person0.getFirstName();
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertNotNull(string0);
      assertEquals("tEz#[CNEI&xm[8", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person("Mother", "null null", true);
      person0.addChild(person1);
      boolean boolean0 = person1.removeRelation(person0);
      assertEquals(2, person1.getId());
      assertTrue(boolean0);
      assertEquals("null null", person1.getLastName());
      assertEquals("female", person1.getGender());
      assertEquals("Mother", person1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Person person0 = new Person("", "", true);
      String string0 = person0.toString();
      assertEquals(1, person0.getId());
      assertEquals(" ", string0);
      assertEquals("female", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setFemale(true);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Locale locale0 = new Locale("!,ua/o,BW]/d(", "male");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar0);
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertFalse(boolean0);
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.getRelationships();
      assertEquals(1, person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Person person0 = new Person("", "zkdeV8_<1ag", false);
      String string0 = person0.getLastName();
      assertEquals("zkdeV8_<1ag", string0);
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("male", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      person0.setLastName("");
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Person person0 = new Person("^S", "f0hlu2", false);
      assertEquals("^S", person0.getFirstName());
      
      person0.setFirstName("male");
      assertEquals("f0hlu2", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Person person0 = new Person("", "", true);
      boolean boolean0 = person0.isFemale();
      assertTrue(boolean0);
      assertEquals(1, person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
  }
}
