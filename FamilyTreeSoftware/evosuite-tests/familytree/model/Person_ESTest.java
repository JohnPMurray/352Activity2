/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 28 23:49:40 GMT 2018
 */

package familytree.model;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.fail;

import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 36, 1);
      person0.dateOfDeathEquals(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      person0.setDateOfDeath(gregorianCalendar0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      gregorianCalendar1.set(0, 0, 1);
      person0.dateOfDeathEquals(gregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Locale locale0 = new Locale("", "", "");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      person0.setDateOfBirth(gregorianCalendar0);
      GregorianCalendar gregorianCalendar1 = person0.getDateOfDeath();
      Date date0 = gregorianCalendar0.getTime();
      gregorianCalendar1.setGregorianChange(date0);
      person0.dateOfBirthEquals(gregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person.restorePerson(1, "", "", false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.isFemale();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", true);
      person1.addSpouse(person0);
      person0.getRelationships();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      person0.getLastName();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = new Person("", "4", true);
      person0.getLastName();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      person0.getId();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "", "", false);
      person0.getId();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      person0.getFirstName();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = new Person("g", "", true);
      person0.getFirstName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0);
      gregorianCalendar0.setMinimalDaysInFirstWeek((-1));
      person0.setDateOfBirth(gregorianCalendar0);
      person0.getDateOfBirth();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Locale locale0 = new Locale("", "", "");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      gregorianCalendar0.setFirstDayOfWeek((-1));
      person0.setDateOfBirth(gregorianCalendar0);
      person0.getDateOfBirth();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Person person0 = new Person("", (String) null, true);
      person0.setDateOfDeath((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        person0.getDateOfDeath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.setDateOfBirth((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        person0.getDateOfBirth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.setDateOfBirth((GregorianCalendar) null);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0, 0);
      gregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person("", "", false);
      // Undeclared exception!
      try { 
        person0.addSpouse((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      // Undeclared exception!
      try { 
        person0.addChild((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      person0.getRelation(person0);
      //  // Unstable assertion: assertEquals(9, person0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      person0.getRelation(person1);
      //  // Unstable assertion: assertEquals(3, person1.getId());
      //  // Unstable assertion: assertEquals(2, person0.getId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.getRelationships();
      //  // Unstable assertion: assertEquals((-12), person0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      person0.setDateOfDeath(gregorianCalendar0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      gregorianCalendar1.roll(1, true);
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar1);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=49,SECOND=23,MILLISECOND=877,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-1), 1, 0, 0);
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(1, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(10, person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person("", "", false);
      boolean boolean0 = person0.dateOfDeathEquals((Calendar) null);
      //  // Unstable assertion: assertEquals((-69), person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person("", "", false);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.get(0);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(26, person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person("", "", false);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.PRC;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0, locale0);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1519861753743,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=60,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=49,SECOND=13,MILLISECOND=743,ZONE_OFFSET=64800000,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 1);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals((-26), person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(6, person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Person person0 = new Person("", "", false);
      boolean boolean0 = person0.dateOfBirthEquals((Calendar) null);
      //  // Unstable assertion: assertEquals(8, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Person person0 = new Person("", "", true);
      int int0 = person0.getGenderAsInt();
      //  // Unstable assertion: assertEquals((-6), person0.getId());
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Person person0 = new Person("", "", false);
      int int0 = person0.getGenderAsInt();
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.getGender();
      //  // Unstable assertion: assertEquals(10, person0.getId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.getGender();
      //  // Unstable assertion: assertEquals(11, person0.getId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(16, person1.getId());
      
      person0.getChildren();
      //  // Unstable assertion: assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      person1.addSpouse(person0);
      person0.getChildren();
      //  // Unstable assertion: assertEquals(59, person0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = Person.restorePerson(0, (String) null, (String) null, false);
      person1.addSpouse(person0);
      //  // Unstable assertion: assertEquals(19, person0.getId());
      
      person1.getRelation(person1);
      //  // Unstable assertion: assertEquals(0, person1.getId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      person0.addChild(person1);
      boolean boolean0 = person0.removeRelation(person0);
      //  // Unstable assertion: assertEquals(31, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person1.addChild(person0);
      person0.getRelation(person1);
      //  // Unstable assertion: assertEquals((-42), person1.getId());
      //  // Unstable assertion: assertEquals((-43), person0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", false);
      Person person2 = new Person("", "", true);
      person2.addChild(person0);
      person1.addChild(person2);
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(14, person1.getId());
      //  // Unstable assertion: assertEquals("male", person1.getGender());
      //  // Unstable assertion: assertEquals(13, person0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person((String) null, (String) null, true);
      person1.addSpouse(person0);
      try { 
        person0.addSpouse(person1);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = Person.restorePerson(0, "", "", false);
      person1.addSpouse(person0);
      Person person2 = new Person("", "", true);
      person0.addChild(person2);
      //  // Unstable assertion: assertEquals(7, person0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Person person0 = new Person("", "", true);
      int int0 = person0.getId();
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.getFirstName();
      //  // Unstable assertion: assertEquals(36, person0.getId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1519861747528,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=49,SECOND=7,MILLISECOND=528,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      person0.addChild(person1);
      boolean boolean0 = person0.removeRelation(person1);
      //  // Unstable assertion: assertEquals(12, person1.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Person person0 = new Person("", "", true);
      String string0 = person0.toString();
      //  // Unstable assertion: assertEquals(" ", string0);
      //  // Unstable assertion: assertEquals(5, person0.getId());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setFemale(true);
      //  // Unstable assertion: assertEquals(10, person0.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1519861745816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=49,SECOND=5,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.getLastName();
      //  // Unstable assertion: assertEquals((-1), person0.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setLastName("");
      //  // Unstable assertion: assertEquals(10, person0.getId());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setFirstName("");
      //  // Unstable assertion: assertEquals(54, person0.getId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      person0.setDateOfDeath(gregorianCalendar0);
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1519861741453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=49,SECOND=1,MILLISECOND=453,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Person person0 = new Person("", "", true);
      try { 
        person0.addChild(person0);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Person person0 = new Person("", "", false);
      boolean boolean0 = person0.isFemale();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1, person0.getId());
  }
}
